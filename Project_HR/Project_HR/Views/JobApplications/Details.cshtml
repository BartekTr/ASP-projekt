@model Project_HR.Models.JobApplication

@{
    ViewData["Title"] = "Details";
}

<div class="row page-box">
    <h1>Application for @Model.Offer.JobTitle in @Model.Offer.Company.Name</h1>
    <div class="col-sm-8">
        <div class="offer-description" id="previewMarkdown">
            @Model.Offer.Description
        </div>
    </div>
    <div class="col-sm-4">
        <div class="offer-details">
            <h3> Job offer details:</h3>
            <div>
                <label>Company:</label>
                <span>@Model.Offer.Company.Name</span>
            </div>
            <div>
                <label>Show company's description:</label>
                <input type="checkbox" data-bind="checked: shouldShowMessage" />
            </div>
            <div data-bind="visible: shouldShowMessage">
                <label> Company description:</label>
                <span> @Model.Offer.Company.Description</span>
            </div>
            <div>
                <label>Location:</label>
                <span>@Model.Offer.Location</span>
            </div>
            @if (Model.Offer.SalaryFrom.HasValue)
            {
                <div>
                    <label>Salary from:</label>
                    <span>@Model.Offer.SalaryFrom (PLN)</span>
                </div>
            }
            @if (Model.Offer.SalaryTo.HasValue)
            {
                <div>
                    <label>Salary to:</label>
                    <span>@Model.Offer.SalaryTo (PLN)</span>
                </div>
            }
            <div>
                <label>Created:</label>
                <span>@Model.Offer.Created</span>
            </div>
            @if (Model.Offer.ValidUntil.HasValue)
            {
                <div>
                    <label>Valid:</label>
                    <span>@Model.Offer.ValidUntil.Value.Subtract(DateTime.Now).Days days (@Model.Offer.ValidUntil)</span>
                </div>
            }
        </div>
        <div class="user-details">
            <h3> Application details:</h3>
            <div>
                <label>Cv:</label>
                <span>@Model.CvUrl</span>
            </div>
            <div>
                <label>Contact agreement:</label>
                @Html.CheckBoxFor(m => m.ContactAgreement, new { @disabled = "disabled" })
            </div>
            <div>
                <label>State:</label>
                <span>@Model.State.Name</span>
            </div>
        </div>
        <div>
            @if (User.IsInRole("HR"))
            {
                @if (Model.StateId == 1)
                {
                    @using (Html.BeginForm("ChangeState", "JobApplications", new { appId = Model.Id, option = 2 }, FormMethod.Post, null, new { style = "display:inline;" }))
                    {
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn btn-primary">Approve</button>
                    }
                    @using (Html.BeginForm("ChangeState", "JobApplications", new { appId = Model.Id, option = 3 }, FormMethod.Post, null, new { style = "display:inline;" }))
                    {
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn btn-danger">Reject</button>
                    }
                }
            }
            @if (User.IsInRole("User") && Model.StateId == 1)
            {
                @Html.ActionLink("Edit", "Edit", new { Model.Id }, new { @class = "btn btn-primary" })
                @using (Html.BeginForm("Delete", "JobApplications", new { Model.Id }, FormMethod.Post, null, new { style = "display:inline;" }))
                {
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-danger">Delete</button>
                }
            }
        </div>
    </div>
    @Html.ActionLink("Go back to Applications", "Index", "JobApplications", null, new { @class = "btn btn-primary" })
</div>
<script src="~/lib/knockout/knockout-3.5.1.js"></script>
@section scripts{
    <script type="text/javascript">
        var viewModel = function (value) {
            this.shouldShowMessage = ko.observable(value) // Message initially visible
        };
        ko.applyBindings(new viewModel(false));
    </script>
}
