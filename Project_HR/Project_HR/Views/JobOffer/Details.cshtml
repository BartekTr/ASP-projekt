@model Project_HR.Models.JobOffer

@{ ViewBag.Title = "Offer";}

<div class="row page-box">
    <h1>@Model.JobTitle</h1>
    <div class="col-sm-8">
        <div class="offer-description" id="previewMarkdown">
            @Model.Description
        </div>
    </div>
    <div class="col-sm-4">
        <div class="offer-details">
            <div>
                <label>Company:</label>
                <span>@Model.Company.Name</span>
            </div>
            <div>
                <label>Show company's description:</label>
                <input type="checkbox" data-bind="checked: shouldShowMessage"/>
            </div>
            <div data-bind="visible: shouldShowMessage">
                <label> Company description:</label>
                <span> @Model.Company.Description</span>
            </div>
            <div>
                <label>Location:</label>
                <span>@Model.Location</span>
            </div>
            @if (Model.SalaryFrom.HasValue)
            {
                <div>
                    <label>Salary from:</label>
                    <span>@Model.SalaryFrom (PLN)</span>
                </div>
            }
            @if (Model.SalaryTo.HasValue)
            {
                <div>
                    <label>Salary to:</label>
                    <span>@Model.SalaryTo (PLN)</span>
                </div>
            }
            <div>
                <label>Created:</label>
                <span>@Model.Created</span>
            </div>
            @if (Model.ValidUntil.HasValue)
            {
                <div>
                    <label>Valid:</label>
                    <span>@Model.ValidUntil.Value.Subtract(DateTime.Now).Days days (@Model.ValidUntil)</span>
                </div>
            }
            <div>
                @if (User.Identity.IsAuthenticated && User.IsInRole("Admin"))
                    @Html.ActionLink("Edit", "Edit", new { id = Model.Id }, new { @class = "btn btn-primary" })
                @if (User.Identity.IsAuthenticated && User.IsInRole("User"))
                {
                    @if (@ViewBag.LinkableId == -1)
                        @Html.ActionLink("Applicate", "Applicate", new { id = Model.Id }, new { @class = "btn btn-primary" })
                        else
                        {
                            @Html.ActionLink("Edit application", "EditApplicate", new { id2 = ViewBag.LinkableId }, new { @class = "btn btn-primary" })
                        }
                }
                @if (User.Identity.IsAuthenticated && User.IsInRole("Admin"))
                {
                    @using (Html.BeginForm("Delete", "JobOffer", new { Model.Id }, FormMethod.Post, null, new { style = "display:inline;" }))
                    {
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn btn-danger">Delete</button>
                    }
                    <br />
                    <br />
                    if (Model.Hrid == null)
                        @Html.ActionLink("Choose HR", "Index", "HR", new { id = Model.Id }, new { @class = "btn btn-primary" })
                        else
                        {
                            @Model.Hr.FirstName @Model.Hr.LastName
                            <div>
                                is already chosen to HR of this offer
                                @using (Html.BeginForm("Remove", "HR", new { offerId = Model.Id, userId = Model.Hrid }, FormMethod.Post))
                                {
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="btn btn-danger">Remove</button>
                                }
                            </div>
                        }

                    }
            </div>
        </div>
    </div>
    @Html.ActionLink("Go back to Job Offers", "Index", "JobOffer", null, new { @class = "btn btn-primary" })
</div>

<script src="~/lib/knockout/knockout-3.5.1.js"></script>
@section scripts{
    <script type="text/javascript">
        var viewModel = function (value) {
            this.shouldShowMessage = ko.observable(value) // Message initially visible
        };
        ko.applyBindings(new viewModel(false));
    </script>
}
